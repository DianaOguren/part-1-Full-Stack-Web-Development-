{"ast":null,"code":"var _jsxFileName = \"/Users/dianaoguren/Documents/part1_React/part_1.6_1.14/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StatisticLine = ({\n  text,\n  value,\n  sign\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: [text, \"\\xA0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [value, sign]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = StatisticLine;\n\nconst Button = ({\n  func,\n  but_name\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: func,\n      children: but_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c2 = Button;\n\nconst Statistics = props => {\n  let all = props.good + props.neutral + props.bad;\n  let avarage = (props.good * 1 + props.neutral * 0 + props.bad * -1) / all;\n  let newValue = isNaN(avarage) ? 0 : avarage;\n  let pos = props.good / all * 100;\n  let positive = isNaN(pos) ? 0 : pos;\n\n  if (all === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"good:\",\n      value: props.good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"neutral:\",\n      value: props.neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"bad:\",\n      value: props.bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"total number:\",\n      value: all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"average score:\",\n      value: newValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"positive feedback:\",\n      value: positive,\n      sign: \"%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Statistics;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const increaseGood = () => setGood(good + 1);\n\n  const increaseNeutral = () => setNeutral(neutral + 1);\n\n  const increaseBad = () => setBad(bad + 1);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Give feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        func: increaseGood,\n        but_name: \"Good\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        func: increaseNeutral,\n        but_name: \"Neutral\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        func: increaseBad,\n        but_name: \"Bad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StatisticLine\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/dianaoguren/Documents/part1_React/part_1.6_1.14/src/App.js"],"names":["React","useState","StatisticLine","text","value","sign","Button","func","but_name","Statistics","props","all","good","neutral","bad","avarage","newValue","isNaN","pos","positive","App","setGood","setNeutral","setBad","increaseGood","increaseNeutral","increaseBad"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n\nconst StatisticLine = ({text, value, sign}) => {\n  return (\n    <>\n      <table></table>\n      <tr>\n        <td>{text}&nbsp;</td>\n        <td>{value}{sign}</td>\n      </tr>\n    </>\n  )\n}\n\nconst Button = ({func, but_name}) => {\n  return (\n    <>\n      <button onClick={func}>{but_name}</button>\n    </>\n  )\n}\n\n\nconst Statistics = (props) => {\n  let all = props.good + props.neutral + props.bad;\n  let avarage = (props.good*1+props.neutral*0+props.bad*(-1))/all;\n  let newValue = (isNaN(avarage) ? 0 : (avarage));\n  let pos = (props.good/all)*100;\n  let positive = (isNaN(pos) ? 0 : (pos));\n  \n  \n  if (all === 0) {\n    return (\n      <div>\n        <h1>Statistics</h1>\n        <p>No feedback given</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1>Statistics</h1>\n      <StatisticLine text=\"good:\" value ={props.good} />\n      <StatisticLine text=\"neutral:\" value ={props.neutral} />\n      <StatisticLine text=\"bad:\" value ={props.bad} />\n      <StatisticLine text=\"total number:\" value ={all} />\n      <StatisticLine text=\"average score:\" value ={newValue} />\n      <StatisticLine text=\"positive feedback:\" value ={positive} sign=\"%\"/>\n    </div>\n  );\n}\n\nconst App = () => {\n  \n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const increaseGood = () => setGood(good + 1);\n  const increaseNeutral = () => setNeutral(neutral + 1);\n  const increaseBad = () => setBad(bad + 1);\n\n  return (\n    <div>\n      <div className=\"feedback\">\n        <h1>Give feedback</h1>\n        <Button func={increaseGood} but_name=\"Good\"/>\n        <Button func={increaseNeutral} but_name=\"Neutral\"/>\n        <Button func={increaseBad} but_name=\"Bad\"/>\n      </div>\n\n      <div>\n        <Statistics good={good} neutral={neutral} bad={bad}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}